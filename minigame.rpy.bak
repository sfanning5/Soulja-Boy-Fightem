init python:

    import math
    import pygame

    minigame_duration = 15

    defeat = False
    victory = False

    player_pos = Vector2(-1, -1)
    player_speed = 2.5
    projectile_speed = 1.6
    projectiles_per_second = 3


    dx = 0
    dy = 0
    player_controls = {
        pygame.K_i : [0, -1, False],
        pygame.K_k : [0, 1, False],
        pygame.K_j : [-1, 0, False],
        pygame.K_l : [1, 0, False]
    }

    projectiles_spawned = 0
    projectiles = []

    def reset_data():
        global victory
        global defeat
        global projectiles_spawned
        global projectiles
        global dx
        global dy
        global player_controls

        defeat = False
        victory = False
        projectiles_spawned = 0
        projectiles = []
        dx = 0
        dy = 0

        player_controls = {
            pygame.K_i : [0, -1, False],
            pygame.K_k : [0, 1, False],
            pygame.K_j : [-1, 0, False],
            pygame.K_l : [1, 0, False]
        }

    def countdown(st, at, length):
        global victory

        remaining = length - st

        # Player wins the game
        if remaining <= 0:
            remaining = 0
            victory = True
            renpy.timeout(0)

        return Text("{alpha=0.5} " + ("%.1f" % remaining), color="#FFD700", size=200, bold=True), .1

    alternating = True
    def spawn_projectile(width, height):
        import random
        global projectiles_spawned
        global alternating

        PADDING = 10
        WIDTH_VARIATION = width / 4

        new_proj = Projectile()

        if alternating:
            new_proj.position.y = -PADDING
        else:
            new_proj.position.y = height + PADDING
            new_proj.position_change.y *= -1
        alternating = not alternating

        new_proj.position.x = width/2 + random.random() * WIDTH_VARIATION * random.choice([-1, 1])

        projectiles.append(new_proj)
        projectiles_spawned += 1

    class Minigame(renpy.Displayable):

        def __init__(self, **kwargs):

            # Pass additional properties on to the renpy.Displayable
            # constructor.
            super(Minigame, self).__init__(**kwargs)

            self.player_image = renpy.displayable("Props/pr_player.png")

        def render(self, width, height, st, at):
            global player_pos
            global defeat

            if player_pos.x == -1 and player_pos.y == -1:
                player_pos = Vector2(width/2, height/2)

            render = renpy.Render(width, height)

            # Spawns projectiles if appropriate

            if(st * projectiles_per_second > projectiles_spawned):
                spawn_projectile(width, height)

            # Renders the given projectile
            def render_projectile(projectile):

                proj_render = renpy.render(projectile.img, width, width, st, at)
                sizex, sizey = proj_render.get_size()

                if not projectile.zoomed: # Ensures the projectile is only zoomed once
                    proj_render.zoom(projectile.zoom_amount, projectile.zoom_amount)
                    projectile.zoomed = True

                render.blit(proj_render, (projectile.position.x - sizex/2, projectile.position.y - sizey/2))

            # Moving + Rendering all projectiles
            for projectile in projectiles:
                projectile.move()
                render_projectile(projectile)

                # Checks for collisions
                if projectile.position.distance(player_pos) < 75:
                    projectile.position_change = Vector2(0, 0)
                    defeat = True
                    renpy.timeout(0)

            # Moving + rendering player
            player_pos.x += dx * player_speed
            player_pos.y += dy * player_speed

            # Applying movement boundaries
            VERTICAL_PADDING = 50

            if player_pos.x < width / 4:
                player_pos.x = width / 4
            elif player_pos.x > width * 3 / 4:
                player_pos.x = width * 3 / 4
            if player_pos.y < VERTICAL_PADDING:
                player_pos.y = VERTICAL_PADDING
            elif player_pos.y > height - VERTICAL_PADDING:
                player_pos.y = height - VERTICAL_PADDING

            pl = renpy.render(self.player_image, width, width, st, at)

            playersize_x, playersize_y = pl.get_size()
            render.blit(pl, (player_pos.x - playersize_x/2, player_pos.y - playersize_y/2))


            renpy.redraw(self, 0)
            return render


        # Handles events.
        def event(self, ev, x, y, st):
            global dx
            global dy
            if ev.type == pygame.KEYDOWN and ev.key in player_controls and not player_controls[ev.key][2]:
                diffs = player_controls[ev.key]
                dx += diffs[0]
                dy += diffs[1]
                player_controls[ev.key][2] = True
            elif ev.type == pygame.KEYUP and ev.key in player_controls and player_controls[ev.key][2]:
                diffs = player_controls[ev.key]
                dx -= diffs[0]
                dy -= diffs[1]
                player_controls[ev.key][2] = False

            if defeat:
                return False

            elif victory:
                return True


        def visit(self):
            return [ ]

screen minigame(duration):

    $ reset_data()

    add "Backgrounds/bg_minigame_placeholder.png" at truecenter:
        xzoom 1.645
        yzoom 1.605

    add DynamicDisplayable(countdown, duration) at truecenter

    add Minigame():
        xalign 0.5
        yalign 0.5


label start_minigame:

    "{b}{i}ENGAGING SWAG BATTLE IN 3{/b}{/i}"

    "{b}{i}2{/b}{/i}"

    "{b}{i}1{/b}{/i}"

    "{b}{i}GO!!!{/b}{/i} (use IJKL to move)"

    call screen minigame(minigame_duration)

    if _return:

        "{b}{i}GLORIOUS VICTORY!{/b}{/i}"

        return True

    else:

        "{b}{i}SHOCKING DEFEAT!{/b}{/i}"

        menu: #The three choices will go hard, medium, then easy for game difficulty

            "Try again":

                call start_minigame

            "Accept rightful defeat":

                return False

    return _return
